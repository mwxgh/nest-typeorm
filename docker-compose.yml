version: '3.8'

services:
  # Application Service
  app:
    build:
      context: .
      target: development
      dockerfile: ./dockerfile
    container_name: nest_typeorm
    command: npm run start:dev  # Nodemon will restart on changes
    ports:
      - "${APP_PORT}:3000"
    volumes:
      - .:/usr/src/app  # Sync code with the container
      - /usr/src/app/node_modules  # Keep node_modules in container
    depends_on:
      - mysql
    env_file: ./.env
    networks:
      - backend

  # MySQL Database Service
  mysql:
    platform: linux/x86_64
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PW}
      MYSQL_DATABASE: ${DATABASE_DB}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PW}
    env_file: ./.env
    ports:
      - '13306:3306'
    command: --default-authentication-plugin=caching_sha2_password
    volumes:
      - ./.docker/mysql/data:/var/lib/mysql
      - ./.docker/mysql/conf.d:/etc/mysql/mysql.conf.d/
    restart: always
    networks:
      - backend

  # phpMyAdmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    links:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: always
    ports:
      - '8081:80'
    networks:
      - backend

  # Redis Service
  # redis:
  #   image: redis:latest
  #   environment:
  #     - ALLOW_EMPTY_PASSWORD=yes
  #     - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
  #   ports:
  #     - "6679:6379"
  #   volumes:
  #     - ./.docker/redis/data:/data
  #   networks:
  #     - backend

  # Redis UI
  # redis-ui:
  #   image: erikdubbelboer/phpredisadmin
  #   environment:
  #     ADMIN_USER: admin
  #     ADMIN_PASS: admin
  #     REDIS_1_HOST: redis
  #     REDIS_1_PORT: 6379
  #   ports:
  #     - "8082:81"
  #   links:
  #     - redis
  #   networks:
  #     - backend

  # MinIO Service
  minio:
    image: docker.io/bitnami/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PW}
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    restart: always
    networks:
      - backend

volumes:
  minio_data:

# Define networks
networks:
  backend:
    driver: bridge
